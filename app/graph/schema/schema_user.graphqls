scalar Time
# Type
type User {
  id: String!
  created_at:Time!
  updated_at:Time!
  deleted_at:Time
  name: String!
  email: String!
  status: String!
}

type Post {
  id: String!
  created_at:Time!
  updated_at:Time!
  title: String!
  description:String!
  total_like:Int
  user:User!
  comments:CommentList
}

type Pagination {
  per_page:Int!
  page:Int!
  total_page:Int!
  total_data:Int!
}

type PostList {
  posts:[Post]!
  pagination: Pagination!
}


type Comment {
  id: String!
  created_at:Time!
  updated_at:Time!
  deleted_at:Time
  description:String!
  user:User!
  post:Post!
  like:[Like]!
}

type CommentList {
  comments:[Comment]!
  pagination: Pagination!
}

type Like {
  id: String!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
  post: Post!
  user: User!
}

type Token {
  token: String!
}
# Input
input NewUser {
  name: String!
  email: String!
  password: String!
}

input UpdateUser {
  name: String!
  email: String!
  password: String
}

input NewVerify {
  email: String!
  code: Int!
}

input NewLogin {
  email: String!
  password: String!
}

input NewPost {
  title: String!
  description: String!
}

input FilterPost {
  id: [String]
  title: String
  user_id: [String]
  page: Int!
  per_page: Int!
}

input FilterComment {
  post_id: String!
  page: Int!
  per_page: Int!
}

input NewComment {
  user_id: String
  post_id: String!
  description:String!
}

input NewAnswerComment {
  user_id: String
  description:String!
}

input NewLike {
  user_id: String
  post_id: String!
}

# Query
type Query {
  user: [User!]!
  postList (filter:FilterPost): PostList!
  detailPost(id:String!): Post!

}

# Mutation
type Mutation {
  Login(input:NewLogin!): Token!

  createUser(input:NewUser!): User!
  verifyUser(input:NewVerify!): String!
  updateUser(input:UpdateUser): User!

  createPost(input:NewPost!): Post!
  updatePost(id:String!, input:NewPost!): Post!
  detailPost(id:String!): Post!
  deletePost(id:String!): String!

  createComment(input:NewComment!): Comment!
  answerComment(comment_id:String!, input:NewAnswerComment!): Comment!
  updateComment(id:String!, input:NewComment!): Comment!
  deleteComment(id:String!): String!

  Like(input:NewLike!): Like!
}